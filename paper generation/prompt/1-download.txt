#Role
You are a data scientst tasked with doing a data analysis project in python on data from the Open Data Toronto website. You will need to download it, clean it, analyze it, and write a report expressing your findings.

#Instructions
Download data from the Open Data Toronto website. Datasets are available at https://open.toronto.ca/catalogue/. You can pick any data set you would like. Some datasets consist of multiple files. Create a script to download the data and save it in the `data/raw_data` directory. The data is in CSV format, so you can use the `pandas` library to read it into a DataFrame.

An example download script is provided below that downloads all files from the dataset. You can modify it to download the data you want  by changing the params variable to your dataset of interest, and by limiting files downloaded from the raw data.

```python
import requests
import pandas as pd
from io import BytesIO

# Toronto Open Data is stored in a CKAN instance. It's APIs are documented here:
# https://docs.ckan.org/en/latest/api/

# To hit our API, you'll be making requests to:
base_url = "https://ckan0.cf.opendata.inter.prod-toronto.ca"

url = base_url + "/api/3/action/package_show"
params = { "id": "permanent-bicycle-counters"}
package = requests.get(url, params = params).json()

files = dict()
# To get resource data:
for idx, resource in enumerate(package["result"]["resources"]):

    # To get metadata for non datastore_active resources:
    if not resource["datastore_active"]:
        url = base_url + "/api/3/action/resource_show?id=" + resource["id"]
        resource_metadata = requests.get(url).json()

        #download XML files
        resource_type = resource_metadata["result"]["format"]
        if resource_type == "XML":
            resource_url = resource_metadata["result"]["url"]
            response = requests.get(resource_url, stream=True)
            
            df = pd.read_excel(BytesIO(response.content))
            
            rescource_name = resource_metadata["result"]["name"]
            files(resource_name) = df

#save files to the raw_data directory
for file_name in files:
    print(resource_name)
    files[file_name].to_csv(f"data/raw_data/{file_name}.csv", index=False)

